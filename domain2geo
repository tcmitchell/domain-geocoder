#!/usr/bin/env python

#----------------------------------------------------------------------
#
# Dependencies:
#
# git clone https://github.com/maxmind/GeoIP2-python.git
# git clone https://github.com/maxmind/MaxMind-DB-Reader-python.git
# git clone https://github.com/google/ipaddr-py.git
#
#----------------------------------------------------------------------
#
# Data:
#
# Input data files are generated by database queries documented at:
#
#   https://github.com/GENI-NSF/geni-ch/wiki/Database-Queries#all-institutions
#
# The GeoLite2 city database is available for download from:
#
#   http://dev.maxmind.com/geoip/geoip2/geolite2/
#
#----------------------------------------------------------------------
#
# Run:
#
# export PYTHONPATH=GeoIP2-python:MaxMind-DB-Reader-python:ipaddr-py
# ./domain2geo <data file>
#
#----------------------------------------------------------------------
#
# Docs:
#
# For GeoIP2-python: http://geoip2.readthedocs.org/en/latest/
#
#----------------------------------------------------------------------

import csv
import socket
import sys

import geoip2.database


class Domain(object):
    def __init__(self, name, count=0):
        self.name = name
        self.count = count
        self.ip = None
        self.latitude = None
        self.longitude = None


def loadDomainsCSV(file):
    result = []
    with open(file, 'rb') as csvfile:
        reader = csv.reader(csvfile)
        return [Domain(r[0], int(r[1])) for r in reader]

def gethostbyname(hostname):
    try:
        return socket.gethostbyname(hostname)
    except:
        return None

def resolveDomain(name):
    ip = gethostbyname(name)
    if not ip:
        # Try adding 'www' prefix
        ip = gethostbyname('www.' + name)
    if not ip:
        # Drop the original prefix
        name2 = '.'.join(name.split('.')[1:])
        ip = gethostbyname(name2)
    if not ip:
        # Try adding 'www' to the shortened name
        ip = gethostbyname('www.' + name2)
    return ip

if __name__ == '__main__':
    domains = loadDomainsCSV(sys.argv[1])
    for d in domains:
        if '@' in d.name:
            # We know there's some bad domains in the data
            continue
        d.ip = resolveDomain(d.name)
    cityReader = geoip2.database.Reader('GeoLite2-City.mmdb')
    for d in domains:
        if not d.ip:
            # print 'No IP for %s' % (d.name)
            continue
        try:
            city = cityReader.city(d.ip)
            d.longitude = city.location.longitude
            d.latitude = city.location.latitude
        except:
            # print '%s errored' % (d.name)
            pass
    for d in domains:
        if d.longitude and d.latitude:
            print '%s, %d, %s, %f, %f' % (d.name, d.count, d.ip, d.latitude,
                                          d.longitude)
